import groovy.json.JsonSlurper

apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            applicationId="org.readium.sdk.android.launcher"
            minSdkVersion.apiLevel   = 19
            targetSdkVersion.apiLevel = 23
        }
    }

    android.sources {
        main {
            jniLibs {
                dependencies {
                    //library file("lib/x86/prebuilt.so") abi "x86"
                    project ":epub3"
                }
            }
        }
        main {
            java {
                source {
                    srcDirs = [
                            './src/main/java',
                            '../../readium-sdk/Platform/Android/lib/src/main/java'
                    ]
                }
            }
        }
    }

    android.buildTypes {
        debug {
            minifyEnabled = false
        }
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))
        }
    }

    android.productFlavors {
        create ("arm") {
            ndk.with {
                abiFilters.add("armeabi-v7a")
            }
        }
        create ("x86") {
            ndk.with {
                abiFilters.add("x86")
            }
        }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs '../libs'
    }
}

dependencies {
    //compile project(':lib')
    compile fileTree(dir: '../libs', include: '*.jar')
}

task buildCssAssets(type: Copy) {
    from '../../readium-shared-js/build-output/css'
    into './src/main/assets/readium-shared-js/builds/css'
}

task buildSingleBundleAssets(type: Copy) {
    from '../../readium-shared-js/build-output/_multiple-bundles'
    into './src/main/assets/readium-shared-js/builds/multiple-bundle'
}

task buildMultipleBundleAssets(type: Copy) {
    from '../../readium-shared-js/build-output/_single-bundle'
    into './src/main/assets/readium-shared-js/builds/single-bundle'
}

task buildAssets {
    println "Build Js Assets"
}

buildAssets.dependsOn "buildCssAssets",
        "buildSingleBundleAssets",
        "buildMultipleBundleAssets"






def getShaFromHead(gitFolder) {

    def head = new File(gitFolder + "HEAD").text.split(":")
    def isCommit = head.length == 1
    if(isCommit) return head[0].trim()
    def refHead = new File(gitFolder + head[1].trim())
    return refHead.text.trim()
}

task buildEpubReadingSystem_Git_SHA_ANDROID(type: Exec) {

    //def gitRootFolder = "$gitFolder../"
    //println gitRootFolder
    //def cmd = "git --git-dir=$gitRootFolder --work-tree=. rev-parse --verify HEAD"
    //def proc = cmd.execute()
    //def rev = proc.text.trim()
    //println rev

    def gitFolder = "$projectDir/../../"
    ext.gitFolder = gitFolder

    workingDir "$gitFolder"

    //"--git-dir=$gitFolder", "--work-tree=.",
//
//                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//                    println "WINDOWS"
//                    commandLine "cmd", "/c", "git", "rev-parse", "--verify", "HEAD"
//                } else {
//                    println "NOT WINDOWS"
//                    commandLine "git", "rev-parse", "--verify", "HEAD"
//                }

    commandLine "git", "rev-parse", "--verify", "HEAD"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_STATUS_ANDROID(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_SHA_ANDROID

    def gitFolder = buildEpubReadingSystem_Git_SHA_ANDROID.gitFolder

    workingDir "$gitFolder"

    commandLine "git", "status", "--porcelain"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_BRANCH_ANDROID(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_STATUS_ANDROID

    def gitFolder = buildEpubReadingSystem_Git_SHA_ANDROID.gitFolder

    workingDir "$gitFolder"

    commandLine "git", "for-each-ref", '--format="###%(refname:short)@@@%(objectname)"', '\'refs/heads/\''

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        def sha = buildEpubReadingSystem_Git_SHA_ANDROID.output()
        def lines = standardOutput.toString().trim().split("###")
        for (int i = 0; i < lines.length; i++) {
            def line = lines[i].trim()
            if (line.contains(sha)) {
                return line.split("@@@")[0]
            }
        }
        return "";
    }
}

task buildEpubReadingSystem_Git_TAG_ANDROID(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_BRANCH_ANDROID

    def gitFolder = buildEpubReadingSystem_Git_SHA_ANDROID.gitFolder

    workingDir "$gitFolder"

    def sha = buildEpubReadingSystem_Git_SHA_ANDROID.output()

    commandLine "git", "describe", "--tags", "--long", "$sha"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_SHA_SDK(type: Exec) {

    def gitFolder = "$projectDir/../../readium-sdk/"
    ext.gitFolder = gitFolder

    workingDir "$gitFolder"

    commandLine "git", "rev-parse", "--verify", "HEAD"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_STATUS_SDK(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_SHA_SDK

    def gitFolder = buildEpubReadingSystem_Git_SHA_SDK.gitFolder

    workingDir "$gitFolder"

    commandLine "git", "status", "--porcelain"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_BRANCH_SDK(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_STATUS_SDK

    def gitFolder = buildEpubReadingSystem_Git_SHA_SDK.gitFolder

    workingDir "$gitFolder"

    commandLine "git", "for-each-ref", '--format="###%(refname:short)@@@%(objectname)"', '\'refs/heads/\''

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        def sha = buildEpubReadingSystem_Git_SHA_SDK.output()
        def lines = standardOutput.toString().trim().split("###")
        for (int i = 0; i < lines.length; i++) {
            def line = lines[i].trim()
            if (line.contains(sha)) {
                return line.split("@@@")[0]
            }
        }
        return "";
    }
}

task buildEpubReadingSystem_Git_TAG_SDK(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_BRANCH_SDK

    def gitFolder = buildEpubReadingSystem_Git_SHA_SDK.gitFolder

    workingDir "$gitFolder"

    def sha = buildEpubReadingSystem_Git_SHA_SDK.output()

    commandLine "git", "describe", "--tags", "--long", "$sha"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_SHA_SHARED_JS(type: Exec) {

    def gitFolder = "$projectDir/../../readium-shared-js/"
    ext.gitFolder = gitFolder

    workingDir "$gitFolder"

    commandLine "git", "rev-parse", "--verify", "HEAD"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_STATUS_SHARED_JS(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_SHA_SHARED_JS

    def gitFolder = buildEpubReadingSystem_Git_SHA_SHARED_JS.gitFolder

    workingDir "$gitFolder"

    commandLine "git", "status", "--porcelain"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_BRANCH_SHARED_JS(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_STATUS_SHARED_JS

    def gitFolder = buildEpubReadingSystem_Git_SHA_SHARED_JS.gitFolder

    workingDir "$gitFolder"

    commandLine "git", "for-each-ref", '--format="###%(refname:short)@@@%(objectname)"', '\'refs/heads/\''

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        def sha = buildEpubReadingSystem_Git_SHA_SHARED_JS.output()
        def lines = standardOutput.toString().trim().split("###")
        for (int i = 0; i < lines.length; i++) {
            def line = lines[i].trim()
            if (line.contains(sha)) {
                return line.split("@@@")[0]
            }
        }
        return "";
    }
}

task buildEpubReadingSystem_Git_TAG_SHARED_JS(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_BRANCH_SHARED_JS

    def gitFolder = buildEpubReadingSystem_Git_SHA_SHARED_JS.gitFolder

    workingDir "$gitFolder"

    def sha = buildEpubReadingSystem_Git_SHA_SHARED_JS.output()

    commandLine "git", "describe", "--tags", "--long", "$sha"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_SHA_CFI_JS(type: Exec) {

    def gitFolder = "$projectDir/../../readium-shared-js/readium-cfi-js/"
    ext.gitFolder = gitFolder

    workingDir "$gitFolder"

    commandLine "git", "rev-parse", "--verify", "HEAD"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_STATUS_CFI_JS(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_SHA_CFI_JS

    def gitFolder = buildEpubReadingSystem_Git_SHA_CFI_JS.gitFolder

    workingDir "$gitFolder"

    commandLine "git", "status", "--porcelain"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}

task buildEpubReadingSystem_Git_BRANCH_CFI_JS(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_STATUS_CFI_JS

    def gitFolder = buildEpubReadingSystem_Git_SHA_CFI_JS.gitFolder

    workingDir "$gitFolder"

    commandLine "git", "for-each-ref", '--format="###%(refname:short)@@@%(objectname)"', '\'refs/heads/\''

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        def sha = buildEpubReadingSystem_Git_SHA_CFI_JS.output()
        def lines = standardOutput.toString().trim().split("###")
        for (int i = 0; i < lines.length; i++) {
            def line = lines[i].trim()
            if (line.contains(sha)) {
                return line.split("@@@")[0]
            }
        }
        return "";
    }
}

task buildEpubReadingSystem_Git_TAG_CFI_JS(type: Exec) {

    dependsOn buildEpubReadingSystem_Git_BRANCH_CFI_JS

    def gitFolder = buildEpubReadingSystem_Git_SHA_CFI_JS.gitFolder

    workingDir "$gitFolder"

    def sha = buildEpubReadingSystem_Git_SHA_CFI_JS.output()

    commandLine "git", "describe", "--tags", "--long", "$sha"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString().trim()
    }
}


task buildEpubReadingSystem_Git() {

    dependsOn buildEpubReadingSystem_Git_TAG_ANDROID, buildEpubReadingSystem_Git_TAG_SDK, buildEpubReadingSystem_Git_TAG_SHARED_JS, buildEpubReadingSystem_Git_TAG_CFI_JS
    doLast {
        println "Build navigator.epubReadingSystem Git version info..."

        println file('.').absolutePath

        def gitFolderRoot = "$projectDir/../../.git/"
        println gitFolderRoot
        def sha_ANDROID = getShaFromHead(gitFolderRoot)
        println sha_ANDROID

        println buildEpubReadingSystem_Git_SHA_ANDROID.output()
        def tagRoot = buildEpubReadingSystem_Git_TAG_ANDROID.output()
        println tagRoot

        def statusRoot = buildEpubReadingSystem_Git_STATUS_ANDROID.output()
        //println statusRoot
        def cleanRoot = "false";
        if (statusRoot.length() == 0) {
            cleanRoot = "true";
        }
        println cleanRoot

        def branchRoot = buildEpubReadingSystem_Git_BRANCH_ANDROID.output()
        println branchRoot

        ext.shaAndroid = { return sha_ANDROID }
        ext.tagAndroid = { return tagRoot }
        ext.cleanAndroid = { return cleanRoot }
        ext.branchAndroid = { return branchRoot }


        def gitFolderSdk = "$gitFolderRoot" + "modules/readium-sdk/"
        println gitFolderSdk
        def sha_SDK = getShaFromHead(gitFolderSdk)
        println sha_SDK

        println buildEpubReadingSystem_Git_SHA_SDK.output()
        def tagSdk = buildEpubReadingSystem_Git_TAG_SDK.output()
        println tagSdk

        def statusSdk = buildEpubReadingSystem_Git_STATUS_SDK.output()
        //println statusSdk
        def cleanSdk = "false";
        if (statusSdk.length() == 0) {
            cleanSdk = "true";
        }
        println cleanSdk

        def branchSdk = buildEpubReadingSystem_Git_BRANCH_SDK.output()
        println branchSdk

        ext.shaSDK = { return sha_SDK }
        ext.tagSDK = { return tagSdk }
        ext.cleanSDK = { return cleanSdk }
        ext.branchSDK = { return branchSdk }


        def gitFolderSharedJs = "$projectDir/../../.git/modules/readium-shared-js/"
        println gitFolderSharedJs
        def sha_SHARED_JS = getShaFromHead(gitFolderSharedJs)
        println sha_SHARED_JS

        println buildEpubReadingSystem_Git_SHA_SHARED_JS.output()
        def tagSharedJs = buildEpubReadingSystem_Git_TAG_SHARED_JS.output()
        println tagSharedJs

        def statusSharedJS = buildEpubReadingSystem_Git_STATUS_SHARED_JS.output()
        //println statusSharedJS
        def cleanSharedJs = "false";
        if (statusSharedJS.length() == 0) {
            cleanSharedJs = "true";
        }
        println cleanSharedJs

        def branchSharedJs = buildEpubReadingSystem_Git_BRANCH_SHARED_JS.output()
        println branchSharedJs

        ext.shaSharedJs = { return sha_SHARED_JS }
        ext.tagSharedJs = { return tagSharedJs }
        ext.cleanSharedJs = { return cleanSharedJs }
        ext.branchSharedJs = { return branchSharedJs }



        def gitFolderCfiJs = "$gitFolderSharedJs" + "modules/readium-cfi-js/"
        println gitFolderCfiJs
        def sha_CFI_JS = getShaFromHead(gitFolderCfiJs)
        println sha_CFI_JS

        println buildEpubReadingSystem_Git_SHA_CFI_JS.output()
        def tagCfiJs = buildEpubReadingSystem_Git_TAG_CFI_JS.output()
        println tagCfiJs

        def statusCfiJs = buildEpubReadingSystem_Git_STATUS_CFI_JS.output()
        //println statusCfiJs
        def cleanCfiJs = "false";
        if (statusCfiJs.length() == 0) {
            cleanCfiJs = "true";
        }
        println cleanCfiJs

        def branchCfiJs = buildEpubReadingSystem_Git_BRANCH_CFI_JS.output()
        println branchCfiJs

        ext.shaCfiJs = { return sha_CFI_JS }
        ext.tagCfiJs = { return tagCfiJs }
        ext.cleanCfiJs = { return cleanCfiJs }
        ext.branchCfiJs = { return branchCfiJs }
    }
}

task buildEpubReadingSystem_DELETE(type: Delete) {
    dependsOn buildEpubReadingSystem_Git

    delete './src/main/assets/readium-shared-js/epubReadingSystem.js'
}

task buildEpubReadingSystem(type: Copy) {
    dependsOn buildEpubReadingSystem_DELETE

    def timestamp = new Date().getTime()
    println timestamp
    def timeString = new Date().toGMTString()
    println timeString

    from './src/main/assets/readium-shared-js/epubReadingSystem_EMPTY.js'
    into './src/main/assets/readium-shared-js'
    rename { String fileName ->
        fileName.replace('_EMPTY', '')
    }
    filter {
        String line ->
            if (line.startsWith('ReadiumSDK.READIUM_dateTimeString')) {
                return line.replace("= '';", "= '" + timeString + "';")
            }
            else if (line.contains('_timestamp')) {
                return line.replace("= '';", "= " + timestamp + ";")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SHARED_JS_version')) {

                def folderRoot = "$projectDir/../../readium-shared-js/"

                def packageSlurper = new JsonSlurper()
                def packageJson = packageSlurper.parse file(folderRoot + 'package.json')

                return line.replace("= '';", "= '" + packageJson.version + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_CFI_JS_version')) {

                def folderRoot = "$projectDir/../../readium-shared-js/readium-cfi-js/"

                def packageSlurper = new JsonSlurper()
                def packageJson = packageSlurper.parse file(folderRoot + 'package.json')

                return line.replace("= '';", "= '" + packageJson.version + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SDK_version')) {

                return line.replace("= '';", "= '" + "0.0.0" + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_Android_version')) {

                return line.replace("= '';", "= '" + "0.0.0" + "';")
            }

            else if (line.startsWith('ReadiumSDK.READIUM_Android_sha')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.shaAndroid() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_Android_tag')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.tagAndroid() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_Android_clean')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.cleanAndroid() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_Android_branch')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.branchAndroid() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_Android_release')) {
                return line.replace("= '';", "= '" + (buildEpubReadingSystem_Git.branchAndroid().startsWith("release/") || (buildEpubReadingSystem_Git.branchAndroid() == "master")) + "';")
            }

            else if (line.startsWith('ReadiumSDK.READIUM_SDK_sha')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.shaSDK() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SDK_tag')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.tagSDK() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SDK_clean')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.cleanSDK() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SDK_branch')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.branchSDK() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SDK_release')) {
                return line.replace("= '';", "= '" + (buildEpubReadingSystem_Git.branchSDK().startsWith("release/") || (buildEpubReadingSystem_Git.branchSDK() == "master")) + "';")
            }

            else if (line.startsWith('ReadiumSDK.READIUM_SHARED_JS_sha')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.shaSharedJs() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SHARED_JS_tag')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.tagSharedJs() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SHARED_JS_clean')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.cleanSharedJs() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SHARED_JS_branch')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.branchSharedJs() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_SHARED_JS_release')) {
                return line.replace("= '';", "= '" + (buildEpubReadingSystem_Git.branchSharedJs().startsWith("release/") || (buildEpubReadingSystem_Git.branchSharedJs() == "master")) + "';")
            }

            else if (line.startsWith('ReadiumSDK.READIUM_CFI_JS_sha')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.shaCfiJs() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_CFI_JS_tag')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.tagCfiJs() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_CFI_JS_clean')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.cleanCfiJs() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_CFI_JS_branch')) {
                return line.replace("= '';", "= '" + buildEpubReadingSystem_Git.branchCfiJs() + "';")
            }
            else if (line.startsWith('ReadiumSDK.READIUM_CFI_JS_release')) {
                return line.replace("= '';", "= '" + (buildEpubReadingSystem_Git.branchCfiJs().startsWith("release/") || (buildEpubReadingSystem_Git.branchCfiJs() == "master")) + "';")
            }

            else
                return line
    }
}


tasks.whenTaskAdded { task ->
    def taskName = task.name

    if (taskName.startsWith("compile")) {
        task.dependsOn "buildAssets"
        task.dependsOn "buildEpubReadingSystem"
    }
}