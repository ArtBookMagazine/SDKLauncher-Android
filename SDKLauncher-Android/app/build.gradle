apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            applicationId="org.readium.sdk.android.launcher"
            minSdkVersion.apiLevel   = 19
            targetSdkVersion.apiLevel = 23
        }
    }

    android.sources {
        main {
            jniLibs {
                dependencies {
                    //library file("lib/x86/prebuilt.so") abi "x86"
                    project ":epub3"
                }
            }
        }
        main {
            java {
                source {
                    srcDirs = [
                            './src/main/java',
                            '../../readium-sdk/Platform/Android/lib/src/main/java'
                    ]
                }
            }
        }
    }

    android.buildTypes {
        debug {
            minifyEnabled = false
        }
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))
        }
    }

    android.productFlavors {
        create ("arm") {
            ndk.with {
                abiFilters.add("armeabi-v7a")
            }
        }
        create ("x86") {
            ndk.with {
                abiFilters.add("x86")
            }
        }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs '../libs'
    }
}

dependencies {
    //compile project(':lib')
    compile fileTree(dir: '../libs', include: '*.jar')
}

task buildCssAssets(type: Copy) {
    from '../../readium-shared-js/build-output/css'
    into './src/main/assets/readium-shared-js/builds/css'
}

task buildSingleBundleAssets(type: Copy) {
    from '../../readium-shared-js/build-output/_multiple-bundles'
    into './src/main/assets/readium-shared-js/builds/multiple-bundle'
}

task buildMultipleBundleAssets(type: Copy) {
    from '../../readium-shared-js/build-output/_single-bundle'
    into './src/main/assets/readium-shared-js/builds/single-bundle'
}

task buildAssets {
    println "Build Js Assets"
}

buildAssets.dependsOn "buildCssAssets",
        "buildSingleBundleAssets",
        "buildMultipleBundleAssets"

tasks.whenTaskAdded { task ->
    def taskName = task.name

    if (taskName.startsWith("compile")) {
        task.dependsOn "buildAssets"
    }
}